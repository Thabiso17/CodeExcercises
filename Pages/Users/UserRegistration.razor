@page "/Users/register"
@using Models.Users
@using Interfaces
@using Back.Services
@inject IUserRegistration UserRegistrationService
@inject IUserService UserService
@inject NavigationManager Navigation

<h2>User Registration</h2>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="user.Username" />
    </div>
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="user.Name" />
    </div>
    <div class="form-group">
        <label for="surname">Surname:</label>
        <InputText id="surname" class="form-control" @bind-Value="user.Surname" />
    </div>
    <div class="form-group">
        <label for="email">Email Address:</label>
        <InputText id="email" class="form-control" @bind-Value="user.EmailAddress" />
    </div>
    <div class="form-group">
        <label for="cellphone">Cellphone Number:</label>
        <InputText id="cellphone" class="form-control" @bind-Value="user.CellphoneNumber" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (localUsers.Any())
{
    <h2>Registered Users</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email Address</th>
                <th>Cellphone Number</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in localUsers)
            {
                <tr>
                    <td>@user.Username</td>
                    <td>@user.Name</td>
                    <td>@user.Surname</td>
                    <td>@user.EmailAddress</td>
                    <td>@user.CellphoneNumber</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private User user = new User();
    private List<User> localUsers = new List<User>();
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        // Clear previous error message
        errorMessage = null;

        // Register and save the user
        var result = UserRegistrationService.RegisterUser(user);

        if (!result.Success)
        {
            errorMessage = result.ErrorMessage;
            StateHasChanged(); // Force re-render
            return;
        }

        errorMessage = null;
        localUsers.Add(user);

        user = new User(); // Reset the form
        StateHasChanged(); // Force re-render
    }
}